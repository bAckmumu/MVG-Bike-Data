MongoDB shell version: 3.2.10
connecting to: infovis
{
	"_batch" : [
		{
			"_id" : {
				"bike_numbers" : [
					96697,
					96503,
					96201,
					97263,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 29
		},
		{
			"_id" : {
				"bike_numbers" : [
					96697,
					96201,
					97263,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 7
		},
		{
			"_id" : {
				"bike_numbers" : [
					96697,
					96658,
					96201,
					97263,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 16
		},
		{
			"_id" : {
				"bike_numbers" : [
					97009,
					96697,
					96658,
					96201,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 12
		},
		{
			"_id" : {
				"bike_numbers" : [
					97053,
					96298,
					96207,
					97252,
					97211
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 24
		},
		{
			"_id" : {
				"bike_numbers" : [
					97184,
					96697,
					96284,
					97263,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 17
		},
		{
			"_id" : {
				"bike_numbers" : [
					97184,
					96697,
					97263,
					97252
				],
				"lat" : 48.119676,
				"lng" : 11.548198
			},
			"count" : 89
		},
		{
			"_id" : {
				"bike_numbers" : [
					97053,
					96207,
					97252,
					97211
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 16
		},
		{
			"_id" : {
				"bike_numbers" : 97252,
				"lat" : 48.13173535,
				"lng" : 11.54343455
			},
			"count" : 20
		},
		{
			"_id" : {
				"bike_numbers" : 97252,
				"lat" : 48.148029,
				"lng" : 11.570819
			},
			"count" : 340
		},
		{
			"_id" : {
				"bike_numbers" : [
					97053,
					96207,
					97286,
					97252,
					97211
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 3
		},
		{
			"_id" : {
				"bike_numbers" : [
					97053,
					96298,
					97252,
					97211
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 17
		},
		{
			"_id" : {
				"bike_numbers" : 97252,
				"lat" : 48.15546972,
				"lng" : 11.55814393
			},
			"count" : 2
		},
		{
			"_id" : {
				"bike_numbers" : [
					97053,
					96298,
					97252
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 5
		},
		{
			"_id" : {
				"bike_numbers" : 97252,
				"lat" : 48.136505825,
				"lng" : 11.54904541
			},
			"count" : 36
		},
		{
			"_id" : {
				"bike_numbers" : [
					96298,
					97252
				],
				"lat" : 48.154061,
				"lng" : 11.553513
			},
			"count" : 21
		},
		{
			"_id" : {
				"bike_numbers" : 97252,
				"lat" : 48.14930623,
				"lng" : 11.55229557
			},
			"count" : 23
		}
	],
	"_useReadCommands" : true,
	"_cursorid" : NumberLong(0),
	"_batchSize" : undefined,
	"_ns" : "infovis.places",
	"_db" : infovis,
	"_collName" : "places",
	"_cursorHandle" : {
		
	},
	"close" : function () {
    if (!this._useReadCommands) {
        this._cursor.close();
    } else if (this._cursorid != 0) {
        var killCursorCmd = {
            killCursors: this._collName,
            cursors: [this._cursorid],
        };
        var cmdRes = this._db.runCommand(killCursorCmd);
        if (cmdRes.ok != 1) {
            throw _getErrorWithCode(cmdRes, "killCursors command failed: " + tojson(cmdRes));
        }

        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong(0);
    }
},
	"_runGetMoreCommand" : function () {
    // Construct the getMore command.
    var getMoreCmd = {
        getMore: this._cursorid,
        collection: this._collName
    };

    if (this._batchSize) {
        getMoreCmd["batchSize"] = this._batchSize;
    }

    // Deliver the getMore command, and check for errors in the response.
    var cmdRes = this._db.runCommand(getMoreCmd);
    if (cmdRes.ok != 1) {
        throw _getErrorWithCode(cmdRes, "getMore command failed: " + tojson(cmdRes));
    }

    if (this._ns !== cmdRes.cursor.ns) {
        throw Error("unexpected collection in getMore response: " + this._ns + " != " +
                    cmdRes.cursor.ns);
    }

    if (!cmdRes.cursor.id.compare(NumberLong("0"))) {
        this._cursorHandle.zeroCursorId();
        this._cursorid = NumberLong("0");
    } else if (this._cursorid.compare(cmdRes.cursor.id)) {
        throw Error("unexpected cursor id: " + this._cursorid.toString() + " != " +
                    cmdRes.cursor.id.toString());
    }

    // Successfully retrieved the next batch.
    this._batch = cmdRes.cursor.nextBatch.reverse();
},
	"_hasNextUsingCommands" : function () {
    assert(this._useReadCommands);

    if (!this._batch.length) {
        if (!this._cursorid.compare(NumberLong("0"))) {
            return false;
        }

        this._runGetMoreCommand();
    }

    return this._batch.length > 0;
},
	"hasNext" : function () {
    if (this._useReadCommands) {
        return this._hasNextUsingCommands();
    }

    return this._batch.length || this._cursor.hasNext();
},
	"next" : function () {
    if (this._batch.length) {
        // $err wouldn't be in _firstBatch since ok was true.
        return this._batch.pop();
    } else if (this._useReadCommands) {
        // Have to call hasNext() here, as this is where we may issue a getMore in order to retrieve
        // the next batch of results.
        if (!this.hasNext())
            throw Error("error hasNext: false");
        return this._batch.pop();
    } else {
        if (!this._cursor.hasNext())
            throw Error("error hasNext: false");

        var ret = this._cursor.next();
        if (ret.$err)
            throw _getErrorWithCode(ret, "error: " + tojson(ret));
        return ret;
    }
},
	"objsLeftInBatch" : function () {
    if (this._useReadCommands) {
        return this._batch.length;
    } else if (this._batch.length) {
        return this._batch.length;
    } else {
        return this._cursor.objsLeftInBatch();
    }
},
	"help" : function () {
    // This is the same as the "Cursor Methods" section of DBQuery.help().
    print("\nCursor methods");
    print("\t.toArray() - iterates through docs and returns an array of the results");
    print("\t.forEach( func )");
    print("\t.map( func )");
    print("\t.hasNext()");
    print("\t.next()");
    print(
        "\t.objsLeftInBatch() - returns count of docs left in current batch (when exhausted, a new getMore will be issued)");
    print("\t.itcount() - iterates through documents and counts them");
    print("\t.pretty() - pretty print each document, possibly over multiple lines");
    print("\t.close()");
},
	"toArray" : function () {
    if (this._arr)
        return this._arr;

    var a = [];
    while (this.hasNext())
        a.push(this.next());
    this._arr = a;
    return a;
},
	"forEach" : function (func) {
    while (this.hasNext())
        func(this.next());
},
	"map" : function (func) {
    var a = [];
    while (this.hasNext())
        a.push(func(this.next()));
    return a;
},
	"itcount" : function () {
    var num = 0;

    // Track how many bytes we've used this cursor to iterate iterated.  This function can be called
    // with some very large cursors.  SpiderMonkey appears happy to allow these objects to
    // accumulate, so regular gc() avoids an overly large memory footprint.
    //
    // TODO: migrate this function into c++
    var bytesSinceGC = 0;

    while (this.hasNext()) {
        num++;
        var nextDoc = this.next();
        bytesSinceGC += Object.bsonsize(nextDoc);

        // Garbage collect every 10 MB.
        if (bytesSinceGC > (10 * 1024 * 1024)) {
            bytesSinceGC = 0;
            gc();
        }
    }
    return num;
},
	"shellPrint" : function () {
    try {
        var start = new Date().getTime();
        var n = 0;
        while (this.hasNext() && n < DBQuery.shellBatchSize) {
            var s = this._prettyShell ? tojson(this.next()) : tojson(this.next(), "", true);
            print(s);
            n++;
        }
        if (typeof _verboseShell !== 'undefined' && _verboseShell) {
            var time = new Date().getTime() - start;
            print("Fetched " + n + " record(s) in " + time + "ms");
        }
        if (this.hasNext()) {
            print("Type \"it\" for more");
            ___it___ = this;
        } else {
            ___it___ = null;
        }
    } catch (e) {
        print(e);
    }

},
	"pretty" : function () {
    this._prettyShell = true;
    return this;
}
}
